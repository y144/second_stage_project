<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/aop https://www.springframework.org/schema/aop/spring-aop.xsd">

    <!--配置spring的ioc,把service对象配置进来 他需要增强 需要添加一个日志通知-->
    <bean id="accountService" class="com.bjpowernode.service.impl.AccountServiceImpl"></bean>

    <!--spring中基于xml的aop配置步骤：
            1.把通知bean也交给spring来管理
            2.使用aop:config标签表明开始aop的配置
            3.使用sop:aspect标签表明配置切面
                标签中的id属性：是给切面提供一个唯一标识
                       ref属性：是指定通知类bean的id
            4.在aop:aspect标签内部使用对应标签来配置通知的类型
                我们现在的示例是让printLog方法在切入点方法执行之前执行，所以是前置通知
                使用aop:before标签：标识配置前置通知
                    标签中的method属性：用于指定logger类中哪个方法是前置通知
                          pointcut属性：用于指定切入点表达式，该表达式的含义指的是对业务层中哪些方法增强

             切入点表达式的写法：
                   关键字：execution(表达式)
                   表达式：
                        访问修饰符  返回值  包名.包名.包名...  类名.方法名(参数列表)
                   标准表达式写法：
                        public void com.bjpowernode.service.impl.AccountServiceImpl.saveAccount()
                   1.访问修饰符可以省略：和上面运行是一样的
                        void com.bjpowernode.service.impl.AccountServiceImpl.saveAccount()
                   2.返回值可以使用通配符，表示任意返回值  和上面运行一样
                        * com.bjpowernode.service.impl.AccountServiceImpl.saveAccount()
                   3.包名可以使用通配符，表示任意包，但是有几级包就要写几个 *.
                        * *.*.*.*.AccountServiceImpl.saveAccount()
                   4.包名可以使用..表示当前当前包及其子包
                        * *..AccountServiceImpl.saveAccount()
                   5.类名和方法名都可以使用*来实现通配
                        * *..*.*()
                   6.参数列表，可以直接写数据类型
                            基本类型：直接写名称  int
                            引用类型：写包名.类名的方式 java.lang.String
                         可以使用通配符表示任意类型，但是必须是有参数的
                         可以使用..表示有误参数均可，有参数可以是任意类型的
                   7.全通配的写法：
                        * *..*.*(..)

           在实际开发中切入点表达式的通常写法：
                切到业务层实现类下的所有方法
                      * com.bjpowernode.service.impl.*.*(..)

    -->

    <!--1.日志的通知对象  把通知bean也交给spring来管理-->
    <bean id="logger" class="com.bjpowernode.utils.Logger"></bean>


    <!--2.开始配置aop-->
    <aop:config>
        <!--配置切面 引用通知-->
        <aop:aspect id="logAdvice" ref="logger">
            <!--配置通知的类型，并且建立通知方法和切入点方法的关联-->
            <!--<aop:before method="printLog" pointcut="execution(public void com.bjpowernode.service.impl.AccountServiceImpl.saveAccount())"></aop:before>-->
            <aop:before method="printLog" pointcut="execution(* com.bjpowernode.service.impl.*.*(..))"></aop:before>
        </aop:aspect>
    </aop:config>
</beans>