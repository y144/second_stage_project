<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!--
    namespace:相当于是包名，用来进行当前所有sql语句的id区分，内容在简单的访问方式中是可以随便写的，但是在动态代理的方式中，就必须是接口的完全限定名称
-->
<mapper namespace="com.bjpowernode.dao.impl">
    <!--
        select:此标签用来进行所有的查询的操作
        id：是为这一套查询操作起个名字，被Session去调用， 来找到这条sql语句
        parameterType:参数，从外部传入到查询语句的条件
        resultType:返回值的类型
        定位这条sql语句是通过包名.id名
        com.bjpowernode.dao.impl.selectAll
    -->

    <!--查询全部学生信息-->
    <select id="selectAll" resultType="com.bjpowernode.pojo.Student">
      select id,name,email,age from student
    </select>

    <!--查询指定id学生的信息-->
    <!--resultType通过这一套完全限定的类名来找到对应的类，然后才能将结果集中的每一列剥下来送到当前的Student的成员变量中，把一堆的成员变量封装起来-->
    <select id="getById" parameterType="int" resultType="com.bjpowernode.pojo.Student">
        select id,name,email,age from student where id=#{id}
    </select>

    <!--按姓名模糊查询-->
    <select id="getByName" parameterType="string" resultType="com.bjpowernode.pojo.Student">
        select id,name,email,age from student where name like '%${value}%'
    </select>

    <!--添加学生信息-->
    <select id="insertStudent" parameterType="com.bjpowernode.pojo.Student">
        insert into student(name,email,age) values(#{name},#{email},#{age})
    </select>

    <!--删除学生信息-->
    <select id="deleteStudent" parameterType="com.bjpowernode.pojo.Student" resultType="int">
        delete from student where id=#{id}
    </select>

    <!--更新学生信息-->
    <select id="updateStudent" parameterType="com.bjpowernode.pojo.Student" resultType="int">
        update student set name="更加客观讲两款发动机",email="35464654@qq.com" where id=#{id}
    </select>
</mapper>